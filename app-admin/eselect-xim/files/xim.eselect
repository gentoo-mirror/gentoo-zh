# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: xim.eselect 40 2007-11-01 02:23:09Z scsi $

DESCRIPTION="Manage Input Method of X"
MAINTAINER="scsichen@gmail.com"
SVN_DATE='$Date: 2007-11-01 10:23:09 +0800 (Thu, 01 Nov 2007) $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

user_xim="${HOME}/.gentoo/eselect-xim/current-user-xim"
system_xim="/etc/eselect-xim/current-system-xim"
XIMDIR=/usr/share/eselect-xim/xim.d
TARGETS=( $( ls $XIMDIR ) )

if [ -z "${UID}" ] ; then
	# id lives in /usr/bin which might not be mounted
	if type id >/dev/null 2>/dev/null ; then
		user_id=$(id -u)
	else
		[ "${USER}" = "root" ] && user_id=0
	fi
else
	user_id=${UID}
fi

[ "$user_id" -eq 0 ] && CURRENTLINK=$system_xim || CURRENTLINK=$user_xim

[ -d $(dirname $CURRENTLINK) ] || mkdir -p $(dirname $CURRENTLINK)

describe_set() {
	echo "set input method"
}

describe_set_parameters() {
	echo "<Input Method Name>"
}

#describe_set_options() {
#	echo "options"
#}

do_set()
{
	[ $# -eq 1 ] || { do_help; return; }
	local target
	if echo $1|grep -e "^[0-9]\+$" >/dev/null 2>&1
	then
		target=${TARGETS[(${1} - 1)]}
	else
		local i
		for (( i = 0 ; i < ${#TARGETS[@]} ; i = i + 1 ))
		do
			[ "${TARGETS[${i}]}" = "${1}" ] && target=${TARGETS[${i}]}
		done
	fi
	#write_warning_msg "${target}"
	[ -z "${target}" ] && { write_error_msg "Input Method  \"$1\" is not available";echo; do_list; return; }
	[ -f $XIMDIR/$target ] || die "$target not found"
	[ -L ${CURRENTLINK} ] && rm -f ${CURRENTLINK} 1>/dev/null 2>&1 
	ln -s $XIMDIR/$target ${CURRENTLINK} || die "make link ${CURRENTLINK} error"
	if [ ${user_id} -eq 0 ]
	then
		write_kv_list_entry "set system xim to ${target}" ""
	else
		write_kv_list_entry "set user xim to ${target}" ""
	fi
}

describe_unset()
{
	echo "remove input method setting"
}

do_unset()
{
	if [ -L ${CURRENTLINK} ] 
	then
		rm -f ${CURRENTLINK} 1>/dev/null 2>&1
		write_kv_list_entry "unset input method success." ""
	else
		write_kv_list_entry "nothing to unset" ""
	fi
}
describe_list()
{
	echo "list available input method"
}

currentset()
{
	[ -f ${CURRENTLINK} ] || return
	basename $(canonicalise ${CURRENTLINK})
}

currentsystemset()
{
	 [ -f ${system_xim} ] || return
	basename $(canonicalise ${system_xim})
}

do_list()
{
	local i targets
	
	write_list_start "Available Input Method:"
	if [[ -n ${TARGETS[@]} ]] ; then
		for (( i = 0 ; i < ${#TARGETS[@]} ; i = i + 1 ))
		do
			if [ "${TARGETS[${i}]}" = "$(currentset)" -a "${TARGETS[${i}]}" = "$(currentsystemset)" ]
			then
				if [ "$user_id" -eq 0 ]
				then
					targets[${i}]="$(highlight '*') ${TARGETS[${i}]}	[system]"
				else
					targets[${i}]="$(highlight '*') ${TARGETS[${i}]}	[system/user]"
				fi
			elif [ "${TARGETS[${i}]}" = "$(currentset)" ]
			then
				targets[${i}]="$(highlight '*') ${TARGETS[${i}]}	[user]"
			elif [ "${TARGETS[${i}]}" = "$(currentsystemset)" ]
			then
				if [ -z "$(currentset)" ]
				then 
					targets[${i}]="$(highlight '*') ${TARGETS[${i}]}	[system]"
				else
					targets[${i}]="  ${TARGETS[${i}]}	[system]"
				fi
			else 
				targets[${i}]="  ${TARGETS[${i}]}"
			fi
		done
                write_numbered_list "${targets[@]}"
        else
                write_kv_list_entry "(none found)" ""
        fi
}

describe_show()
{
	echo "show current input method"
}

do_show()
{
	write_list_start "Current Input Method:"
	if [ -n "$(currentset)" ]
	then
		if [ ${user_id} -eq 0 ] 
		then
			write_kv_list_entry "$(currentset)	[system]"
		else
			write_kv_list_entry "$(currentset)	[user]"
		fi
	elif [ -n "$(currentsystemset)" ]
	then
		write_kv_list_entry "$(currentsystemset)      [system]"
	else
		write_kv_list_entry "(none found)"
	fi

}

