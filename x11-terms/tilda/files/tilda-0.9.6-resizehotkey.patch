From 33c37827faee08d996e70126754f0df956355912 Mon Sep 17 00:00:00 2001
From: microcai <microcai@fedoraproject.org>
Date: Fri, 18 Nov 2011 20:51:01 +0800
Subject: [PATCH 1/2] patched

---
 src/key_grabber.c     |   73 ++++++++++++++++++---------
 src/tilda.c           |   89 +++++++++++++++++++++++++++++++++
 src/tilda_terminal.c  |   27 ++++++++++-
 src/tilda_window.c    |  131 ++++++++++++++++++++++++++++++++++++------------
 src/tomboykeybinder.c |   72 +++++++++++++-------------
 5 files changed, 297 insertions(+), 95 deletions(-)

diff --git a/src/key_grabber.c b/src/key_grabber.c
index e0c0b11..b93d3ee 100644
--- a/src/key_grabber.c
+++ b/src/key_grabber.c
@@ -179,9 +179,12 @@ void pull (struct tilda_window_ *tw, enum pull_state state)
     DEBUG_ASSERT (state == PULL_UP || state == PULL_DOWN || state == PULL_TOGGLE);
 
     gint i;
+    GdkWindow* awin;
+	GdkScreen* screen;
 
     if (tw->current_state == UP && state != PULL_UP)
     {
+
         /* Keep things here just like they are. If you use gtk_window_present() here, you
          * will introduce some weird graphical glitches. Also, calling gtk_window_move()
          * before showing the window avoids yet more glitches. You should probably not use
@@ -190,9 +193,16 @@ void pull (struct tilda_window_ *tw, enum pull_state state)
          * Overriding the user time here seems to work a lot better than calling
          * gtk_window_present_with_time() here, or at the end of the function. I have
          * no idea why, they should do the same thing. */
-        gdk_x11_window_set_user_time (GTK_WIDGET(tw->window)->window,
+
+        gdk_x11_window_set_user_time (GTK_WIDGET(tw->window),
                                       tomboy_keybinder_get_current_event_time());
-        gtk_window_move (GTK_WINDOW(tw->window), config_getint ("x_pos"), config_getint ("y_pos"));
+        screen = gdk_screen_get_default();
+        int num =  gdk_screen_get_primary_monitor(screen);
+        GdkRectangle rt;
+        gdk_screen_get_monitor_geometry(screen, num, &rt);
+
+        gtk_window_move (GTK_WINDOW(tw->window), rt.x + config_getint ("x_pos"), rt.y + config_getint ("y_pos"));
+        gtk_window_set_default_size (GTK_WINDOW(tw->window), config_getint ("max_width"), config_getint ("max_height"));
         gtk_widget_show (GTK_WIDGET(tw->window));
 
         /* Nasty code to make metacity behave. Starting at metacity-2.22 they "fixed" the
@@ -209,41 +219,54 @@ void pull (struct tilda_window_ *tw, enum pull_state state)
         if (config_getbool ("pinned"))
             gtk_window_stick (GTK_WINDOW (tw->window));
 
-        if (config_getbool ("animation"))
-        {
-            for (i=0; i<16; i++)
-            {
-                gtk_window_move (GTK_WINDOW(tw->window), posIV[2][i], posIV[0][i]);
-                gtk_window_resize (GTK_WINDOW(tw->window), posIV[3][i], posIV[1][i]);
-
-                process_all_pending_gtk_events ();
-                g_usleep (config_getint ("slide_sleep_usec"));
-            }
-        }
+        //if (config_getbool ("animation"))
+        //{
+            //for (i=0; i<16; i++)
+            //{
+                //gtk_window_move (GTK_WINDOW(tw->window), posIV[2][i], posIV[0][i]);
+                //gtk_window_resize (GTK_WINDOW(tw->window), posIV[3][i], posIV[1][i]);
 
-        debug_printf ("pull(): MOVED DOWN\n");
+                //process_all_pending_gtk_events ();
+                //g_usleep (config_getint ("slide_sleep_usec"));
+            //}
+        //}
+
+        //debug_printf ("pull(): MOVED DOWN\n");
         tw->current_state = DOWN;
     }
     else if (state != PULL_DOWN)
     {
-        if (config_getbool ("animation"))
-        {
-            for (i=15; i>=0; i--)
-            {
-                gtk_window_move (GTK_WINDOW(tw->window), posIV[2][i], posIV[0][i]);
-                gtk_window_resize (GTK_WINDOW(tw->window), posIV[3][i], posIV[1][i]);
-
-                process_all_pending_gtk_events ();
-                g_usleep (config_getint ("slide_sleep_usec"));
-            }
+        screen = gdk_screen_get_default();
+        awin = gdk_screen_get_active_window(screen);
+        if (awin != tw->window->window) {
+            int num =  gdk_screen_get_primary_monitor(screen);
+            GdkRectangle rt;
+            gdk_screen_get_monitor_geometry(screen, num, &rt);
+
+            gtk_window_move (GTK_WINDOW(tw->window), rt.x + config_getint ("x_pos"), rt.y + config_getint ("y_pos"));
+            gtk_widget_show (GTK_WIDGET(tw->window));
+            tilda_window_set_active (tw);
+            return ;
         }
 
+        //if (config_getbool ("animation"))
+        //{
+            //for (i=15; i>=0; i--)
+            //{
+                //gtk_window_move (GTK_WINDOW(tw->window), posIV[2][i], posIV[0][i]);
+                //gtk_window_resize (GTK_WINDOW(tw->window), posIV[3][i], posIV[1][i]);
+
+                //process_all_pending_gtk_events ();
+                //g_usleep (config_getint ("slide_sleep_usec"));
+            //}
+        //}
+
         /* All we have to do at this point is hide the window.
          * Case 1 - Animation on:  The window has shrunk, just hide it
          * Case 2 - Animation off: Just hide the window */
         gtk_widget_hide (GTK_WIDGET(tw->window));
 
-        debug_printf ("pull(): MOVED UP\n");
+        //debug_printf ("pull(): MOVED UP\n");
         tw->current_state = UP;
     }
 }
diff --git a/src/tilda.c b/src/tilda.c
index d69db6a..2c36c3a 100644
--- a/src/tilda.c
+++ b/src/tilda.c
@@ -50,6 +50,77 @@
 #include <glib/gstdio.h>
 
 
+#include <sys/socket.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h> 
+#include <fcntl.h>
+#include <sys/un.h>
+
+
+static const char remote_control_sock_filename[]="/tmp/tilda.socket";
+int create_socket(const char *name)
+{
+	int fd;
+	int r;
+	struct sockaddr_un uds_addr;
+
+	/* JIC */
+	unlink(name);
+
+	fd = socket(AF_UNIX, SOCK_STREAM, 0);
+	if (fd < 0) {
+		return fd;
+	}
+
+	/* setup address struct */
+	memset(&uds_addr, 0, sizeof(uds_addr));
+	uds_addr.sun_family = AF_UNIX;
+	strcpy(uds_addr.sun_path, name);
+
+	/* bind it to the socket */
+	r = bind(fd, (struct sockaddr *)&uds_addr, sizeof(uds_addr));
+	if (r < 0) {
+		return r;
+	}
+
+
+	/* listen - allow 10 to queue */
+	r = listen(fd, 10);
+	if (r < 0) {
+		return r;
+	}
+
+	return fd;
+}
+
+
+
+gboolean remote_control_fun(GIOChannel* source, GIOCondition condition, gpointer data)
+{
+	int client_fd = 0;
+	int listen_fd = g_io_channel_unix_get_fd(source);
+	int in = 0;
+	tilda_window*  tw = (tilda_window*)data;
+	tilda_term *tt;
+	gint pos;
+
+	struct sockaddr_un cliaddr;
+	socklen_t len = sizeof(struct sockaddr_un);
+	client_fd = accept(listen_fd, (struct sockaddr *)&cliaddr, &len);
+	read(client_fd, &in, sizeof(int));
+	
+    pos = gtk_notebook_get_current_page (GTK_NOTEBOOK (tw->notebook));
+	tt = find_tt_in_g_list (tw, pos);
+	if (in) 
+		vte_terminal_set_cursor_shape(tt->vte_term, VTE_CURSOR_SHAPE_IBEAM);
+	else
+		vte_terminal_set_cursor_shape(tt->vte_term, VTE_CURSOR_SHAPE_BLOCK);
+
+	close(client_fd);
+	return TRUE;
+}
+
 static gchar *create_lock_file (gchar *home_directory, struct lock_info lock)
 {
     DEBUG_FUNCTION ("create_lock_file");
@@ -319,6 +390,7 @@ static gboolean parse_cli (int argc, char *argv[])
     GError *error = NULL;
     GOptionContext *context = g_option_context_new (NULL);
     g_option_context_add_main_entries (context, cl_opts, NULL);
+	GIOChannel* remote_control_sock;
     g_option_context_add_group (context, gtk_get_option_group (TRUE));
     g_option_context_parse (context, &argc, &argv, &error);
     g_option_context_free (context);
@@ -511,6 +583,8 @@ int main (int argc, char *argv[])
     struct lock_info lock;
     gboolean need_wizard = FALSE;
     gchar *home_dir, *config_file, *lock_file;
+	int remote_control_sock;
+	GIOChannel* remote_control_channel;
 
     home_dir = g_strdup (g_get_home_dir ());
 
@@ -619,9 +693,24 @@ int main (int argc, char *argv[])
         pull (tw, PULL_DOWN);
     }
 
+
+	remote_control_sock = create_socket(remote_control_sock_filename);
+	if (remote_control_sock < 0) {
+		fprintf(stderr, "Can't open socket %s: %s\n", remote_control_sock_filename, strerror(errno));
+		return 0;
+	}
+
+	fcntl(remote_control_sock, F_SETFD, FD_CLOEXEC);
+	chmod(remote_control_sock_filename, 0666);
+	remote_control_channel = g_io_channel_unix_new(remote_control_sock);
+	g_io_add_watch(remote_control_channel, G_IO_IN, remote_control_fun, tw);
+
     /* Whew! We're finally all set up and ready to run GTK ... */
     gtk_main();
 
+	close(remote_control_sock);
+	g_io_channel_unref(remote_control_channel);
+
     /* Ok, we're at the end of our run. Time to clean up ... */
     tilda_window_free (tw);
 
diff --git a/src/tilda_terminal.c b/src/tilda_terminal.c
index 7708984..3bc0582 100644
--- a/src/tilda_terminal.c
+++ b/src/tilda_terminal.c
@@ -497,7 +497,32 @@ static gint tilda_term_config_defaults (tilda_term *tt)
     fg.green =    config_getint ("text_green");
     fg.blue  =    config_getint ("text_blue");
 
-    vte_terminal_set_colors (VTE_TERMINAL(tt->vte_term), &fg, &bg, NULL, 0);
+    static char* palette_color[] = { 
+        "#000000000000",
+        "#cccc00000000",
+        "#4e4e9a9a0606",
+        "#c4c4a0a00000",
+        "#34346565a4a4",
+        "#757550507b7b",
+        "#060698209a9a",
+        "#d3d3d7d7cfcf",
+        "#555557575353",
+        "#efef29292929",
+        "#8a8ae2e23434",
+        "#fcfce9e94f4f",
+        "#72729f9fcfcf",
+        "#adad7f7fa8a8",
+        "#3434e2e2e2e2",
+        "#eeeeeeeeecec" };
+
+    GdkColor palette[16];
+    memset(palette, 0, sizeof(palette));
+    int i = 0;
+    for (i = 0; i < 16; i++) {
+        gdk_color_parse(palette_color[i], palette + i);
+    }
+
+    vte_terminal_set_colors (VTE_TERMINAL(tt->vte_term), &fg, &bg, &palette, 16);
 
     /** Bells **/
     vte_terminal_set_audible_bell (VTE_TERMINAL(tt->vte_term), config_getbool ("bell"));
diff --git a/src/tilda_window.c b/src/tilda_window.c
index 9a08f59..937f6a2 100644
--- a/src/tilda_window.c
+++ b/src/tilda_window.c
@@ -56,7 +56,7 @@ tilda_window_setup_alpha_mode (tilda_window *tw)
 }
 
 
-static tilda_term* find_tt_in_g_list (tilda_window *tw, gint pos)
+tilda_term* find_tt_in_g_list (tilda_window *tw, gint pos)
 {
     DEBUG_FUNCTION ("find_tt_in_g_list");
     DEBUG_ASSERT (tw != NULL);
@@ -114,6 +114,59 @@ gint tilda_window_set_tab_position (tilda_window *tw, enum notebook_tab_position
     return 0;
 }
 
+static gint full_screen_window (tilda_window *tw)
+{
+	static gint s_is_full = FALSE;
+	static gint sh;
+	static gint sw;
+	static gint sx;
+	static gint sy;
+
+	if (s_is_full) {
+		s_is_full = FALSE;
+		gtk_window_unmaximize(GTK_WINDOW(tw->window));
+        //screen = gdk_screen_get_default();
+        //awin = gdk_screen_get_active_window(screen);
+        //gtk_window_move (GTK_WINDOW(tw->window), rt.x + config_getint ("x_pos"), rt.y + config_getint ("y_pos"));
+
+		gtk_window_set_default_size (GTK_WINDOW(tw->window), config_getint ("max_width"), config_getint ("max_height"));
+		gtk_window_resize (GTK_WINDOW(tw->window), sw, sh);
+		gtk_window_move (GTK_WINDOW(tw->window), sx, sy);
+	} else {
+		s_is_full = TRUE;
+		gtk_window_get_size(GTK_WINDOW(tw->window), &sw, &sh);
+		gtk_window_get_position(GTK_WINDOW(tw->window), &sx, &sy);
+		gtk_window_maximize(GTK_WINDOW(tw->window));
+	}
+	return TRUE;
+}
+
+static gint zoom_up_window (tilda_window *tw)
+{
+	gint w, h, sw, sh;
+	GdkScreen* screen;
+	screen = gdk_screen_get_default();
+	sw = gdk_screen_get_width(screen);
+	sh = gdk_screen_get_height(screen);
+	gtk_window_get_size(GTK_WINDOW(tw->window), &w, &h);
+	h += 10;
+	if ( h > sh)
+		h = sh;
+	gtk_window_resize (GTK_WINDOW(tw->window), w, h);
+	return TRUE;
+}
+
+static gint zoom_down_window (tilda_window *tw)
+{
+	gint w, h;
+	gtk_window_get_size(GTK_WINDOW(tw->window), &w, &h);
+	h -= 10;
+	if ( h < 20)
+		h = 20;
+	gtk_window_resize (GTK_WINDOW(tw->window), w, h);
+	return TRUE;
+}
+
 static gint next_tab (tilda_window *tw)
 {
     DEBUG_FUNCTION ("next_tab");
@@ -266,58 +319,70 @@ static gint tilda_window_setup_keyboard_accelerators (tilda_window *tw)
     gtk_accel_group_connect (accel_group, 'q', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
 
     /* Go to Next Tab on <Ctrl>Page_Down */
-    temp = g_cclosure_new_swap (G_CALLBACK(next_tab), tw, NULL);
-    gtk_accel_group_connect (accel_group, GDK_Page_Down, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
+	//temp = g_cclosure_new_swap (G_CALLBACK(next_tab), tw, NULL);
+	//gtk_accel_group_connect (accel_group, GDK_Page_Down, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
 
     /* Go to Prev Tab on <Ctrl>Page_Up */
-    temp = g_cclosure_new_swap (G_CALLBACK(prev_tab), tw, NULL);
-    gtk_accel_group_connect (accel_group, GDK_Page_Up, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
+	//temp = g_cclosure_new_swap (G_CALLBACK(prev_tab), tw, NULL);
+	//gtk_accel_group_connect (accel_group, GDK_Page_Up, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
 
     /* Add New Tab on <Ctrl><Shift>t */
-    temp = g_cclosure_new_swap (G_CALLBACK(tilda_window_add_tab), tw, NULL);
-    gtk_accel_group_connect (accel_group, 't', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
+	//temp = g_cclosure_new_swap (G_CALLBACK(tilda_window_add_tab), tw, NULL);
+	//gtk_accel_group_connect (accel_group, 't', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
 
     /* Close Current Tab on <Ctrl><Shift>w */
-    temp = g_cclosure_new_swap (G_CALLBACK(tilda_window_close_current_tab), tw, NULL);
-    gtk_accel_group_connect (accel_group, 'w', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
+	//temp = g_cclosure_new_swap (G_CALLBACK(tilda_window_close_current_tab), tw, NULL);
+	//gtk_accel_group_connect (accel_group, 'w', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
 
     /* Goto Tab # */
     /* Know a better way? Then you do. */
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_1), tw, NULL);
-    gtk_accel_group_connect (accel_group, '1', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_1), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '1', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_2), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '2', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_3), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '3', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_4), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '4', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_2), tw, NULL);
-    gtk_accel_group_connect (accel_group, '2', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_5), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '5', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_3), tw, NULL);
-    gtk_accel_group_connect (accel_group, '3', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_6), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '6', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_4), tw, NULL);
-    gtk_accel_group_connect (accel_group, '4', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_7), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '7', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_5), tw, NULL);
-    gtk_accel_group_connect (accel_group, '5', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_8), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '8', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_6), tw, NULL);
-    gtk_accel_group_connect (accel_group, '6', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_9), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '9', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_7), tw, NULL);
-    gtk_accel_group_connect (accel_group, '7', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_10), tw, NULL);
+    //gtk_accel_group_connect (accel_group, '0', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_8), tw, NULL);
-    gtk_accel_group_connect (accel_group, '8', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(ccopy), tw, NULL);
+    //gtk_accel_group_connect (accel_group, 'c', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_9), tw, NULL);
-    gtk_accel_group_connect (accel_group, '9', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    //temp = g_cclosure_new_swap (G_CALLBACK(cpaste), tw, NULL);
+    //gtk_accel_group_connect (accel_group, 'v', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(goto_tab_10), tw, NULL);
-    gtk_accel_group_connect (accel_group, '0', GDK_MOD1_MASK, GTK_ACCEL_VISIBLE, temp);
+    /* zoom up window */
+    temp = g_cclosure_new_swap (G_CALLBACK(zoom_down_window), tw, NULL);
+    gtk_accel_group_connect (accel_group, GDK_Up, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(ccopy), tw, NULL);
-    gtk_accel_group_connect (accel_group, 'c', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
+    /* zoom down window */
+    temp = g_cclosure_new_swap (G_CALLBACK(zoom_up_window), tw, NULL);
+    gtk_accel_group_connect (accel_group, GDK_Down, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE, temp);
 
-    temp = g_cclosure_new_swap (G_CALLBACK(cpaste), tw, NULL);
-    gtk_accel_group_connect (accel_group, 'v', GDK_CONTROL_MASK | GDK_SHIFT_MASK, GTK_ACCEL_VISIBLE, temp);
+    /* zoom down window */
+    temp = g_cclosure_new_swap (G_CALLBACK(full_screen_window), tw, NULL);
+    gtk_accel_group_connect (accel_group, GDK_F11, 0, GTK_ACCEL_VISIBLE, temp);
 
     return 0;
 }
diff --git a/src/tomboykeybinder.c b/src/tomboykeybinder.c
index b29e2a1..9132683 100644
--- a/src/tomboykeybinder.c
+++ b/src/tomboykeybinder.c
@@ -34,21 +34,21 @@ static guint num_lock_mask, caps_lock_mask, scroll_lock_mask;
 static void
 lookup_ignorable_modifiers (GdkKeymap *keymap)
 {
-	egg_keymap_resolve_virtual_modifiers (keymap, 
+	egg_keymap_resolve_virtual_modifiers (keymap,
 					      EGG_VIRTUAL_LOCK_MASK,
 					      &caps_lock_mask);
 
-	egg_keymap_resolve_virtual_modifiers (keymap, 
+	egg_keymap_resolve_virtual_modifiers (keymap,
 					      EGG_VIRTUAL_NUM_LOCK_MASK,
 					      &num_lock_mask);
 
-	egg_keymap_resolve_virtual_modifiers (keymap, 
+	egg_keymap_resolve_virtual_modifiers (keymap,
 					      EGG_VIRTUAL_SCROLL_LOCK_MASK,
 					      &scroll_lock_mask);
 }
 
 static void
-grab_ungrab_with_ignorable_modifiers (GdkWindow *rootwin, 
+grab_ungrab_with_ignorable_modifiers (GdkWindow *rootwin,
 				      Binding   *binding,
 				      gboolean   grab)
 {
@@ -66,23 +66,23 @@ grab_ungrab_with_ignorable_modifiers (GdkWindow *rootwin,
 
 	for (i = 0; i < G_N_ELEMENTS (mod_masks); i++) {
 		if (grab) {
-			XGrabKey (GDK_WINDOW_XDISPLAY (rootwin), 
-				  binding->keycode, 
-				  binding->modifiers | mod_masks [i], 
-				  GDK_WINDOW_XWINDOW (rootwin), 
-				  False, 
+			XGrabKey (GDK_WINDOW_XDISPLAY (rootwin),
+				  binding->keycode,
+				  binding->modifiers | mod_masks [i],
+				  GDK_WINDOW_XWINDOW (rootwin),
+				  False,
 				  GrabModeAsync,
 				  GrabModeAsync);
 		} else {
 			XUngrabKey (GDK_WINDOW_XDISPLAY (rootwin),
 				    binding->keycode,
-				    binding->modifiers | mod_masks [i], 
+				    binding->modifiers | mod_masks [i],
 				    GDK_WINDOW_XWINDOW (rootwin));
 		}
 	}
 }
 
-static gboolean 
+static gboolean
 do_grab_key (Binding *binding)
 {
 	GdkKeymap *keymap = gdk_keymap_get_default ();
@@ -94,14 +94,14 @@ do_grab_key (Binding *binding)
 	if (keymap == NULL || rootwin == NULL)
 		return FALSE;
 
-	if (!egg_accelerator_parse_virtual (binding->keystring, 
-					    &keysym, 
+	if (!egg_accelerator_parse_virtual (binding->keystring,
+					    &keysym,
 					    &virtual_mods))
 		return FALSE;
 
 	TRACE (g_print ("Got accel %d, %d\n", keysym, virtual_mods));
 
-	binding->keycode = XKeysymToKeycode (GDK_WINDOW_XDISPLAY (rootwin), 
+	binding->keycode = XKeysymToKeycode (GDK_WINDOW_XDISPLAY (rootwin),
 					     keysym);
 	if (binding->keycode == 0)
 		return FALSE;
@@ -116,8 +116,8 @@ do_grab_key (Binding *binding)
 
 	gdk_error_trap_push ();
 
-	grab_ungrab_with_ignorable_modifiers (rootwin, 
-					      binding, 
+	grab_ungrab_with_ignorable_modifiers (rootwin,
+					      binding,
 					      TRUE /* grab */);
 
 	gdk_flush ();
@@ -130,15 +130,15 @@ do_grab_key (Binding *binding)
 	return TRUE;
 }
 
-static gboolean 
+static gboolean
 do_ungrab_key (Binding *binding)
 {
 	GdkWindow *rootwin = gdk_get_default_root_window ();
 
 	TRACE (g_print ("Removing grab for '%s'\n", binding->keystring));
 
-	grab_ungrab_with_ignorable_modifiers (rootwin, 
-					      binding, 
+	grab_ungrab_with_ignorable_modifiers (rootwin,
+					      binding,
 					      FALSE /* ungrab */);
 
 	return TRUE;
@@ -156,31 +156,31 @@ filter_func (GdkXEvent *gdk_xevent, GdkEvent *event, gpointer data)
 
 	switch (xevent->type) {
 	case KeyPress:
-		TRACE (g_print ("Got KeyPress! keycode: %d, modifiers: %d\n", 
-				xevent->xkey.keycode, 
+		TRACE (g_print ("Got KeyPress! keycode: %d, modifiers: %d\n",
+				xevent->xkey.keycode,
 				xevent->xkey.state));
 
-		/* 
+		/*
 		 * Set the last event time for use when showing
 		 * windows to avoid anti-focus-stealing code.
 		 */
 		processing_event = TRUE;
 		last_event_time = xevent->xkey.time;
 
-		event_mods = xevent->xkey.state & ~(num_lock_mask  | 
-						    caps_lock_mask | 
+		event_mods = xevent->xkey.state & ~(num_lock_mask  |
+						    caps_lock_mask |
 						    scroll_lock_mask);
 
 		for (iter = bindings; iter != NULL; iter = iter->next) {
 			Binding *binding = (Binding *) iter->data;
-						       
+
 			if (binding->keycode == xevent->xkey.keycode &&
 			    binding->modifiers == event_mods) {
 
-				TRACE (g_print ("Calling handler for '%s'...\n", 
+				TRACE (g_print ("Calling handler for '%s'...\n",
 						binding->keystring));
 
-				(binding->handler) (binding->keystring, 
+				(binding->handler) (binding->keystring,
 						    binding->user_data);
 			}
 		}
@@ -195,7 +195,7 @@ filter_func (GdkXEvent *gdk_xevent, GdkEvent *event, gpointer data)
 	return return_val;
 }
 
-static void 
+static void
 keymap_changed (GdkKeymap *map)
 {
 	GdkKeymap *keymap = gdk_keymap_get_default ();
@@ -216,7 +216,7 @@ keymap_changed (GdkKeymap *map)
 	}
 }
 
-void 
+void
 tomboy_keybinder_init (void)
 {
 	GdkKeymap *keymap = gdk_keymap_get_default ();
@@ -224,11 +224,11 @@ tomboy_keybinder_init (void)
 
 	lookup_ignorable_modifiers (keymap);
 
-	gdk_window_add_filter (rootwin, 
-			       filter_func, 
+	gdk_window_add_filter (rootwin,
+			       filter_func,
 			       NULL);
 
-	g_signal_connect (keymap, 
+	g_signal_connect (keymap,
 			  "keys_changed",
 			  G_CALLBACK (keymap_changed),
 			  NULL);
@@ -261,7 +261,7 @@ tomboy_keybinder_bind (const char           *keystring,
 }
 
 void
-tomboy_keybinder_unbind (const char           *keystring, 
+tomboy_keybinder_unbind (const char           *keystring,
 			 TomboyBindkeyHandler  handler)
 {
 	GSList *iter;
@@ -270,7 +270,7 @@ tomboy_keybinder_unbind (const char           *keystring,
 		Binding *binding = (Binding *) iter->data;
 
 		if (strcmp (keystring, binding->keystring) != 0 ||
-		    handler != binding->handler) 
+		    handler != binding->handler)
 			continue;
 
 		do_ungrab_key (binding);
@@ -283,7 +283,7 @@ tomboy_keybinder_unbind (const char           *keystring,
 	}
 }
 
-/* 
+/*
  * From eggcellrenderkeys.c.
  */
 gboolean
@@ -315,7 +315,7 @@ tomboy_keybinder_is_modifier (guint keycode)
 guint32
 tomboy_keybinder_get_current_event_time (void)
 {
-	if (processing_event) 
+	if (processing_event)
 		return last_event_time;
 	else
 		return GDK_CURRENT_TIME;
-- 
1.7.8.rc1

