diff --git a/gdb/infcmd.c b/gdb/infcmd.c
index 29cf427..49e99c9 100644
--- a/gdb/infcmd.c
+++ b/gdb/infcmd.c
@@ -115,6 +115,9 @@ static void step_command (char *, int);
 
 static void run_command (char *, int);
 
+static void heap_command (char *, int);
+static void heapf_command (char *, int);
+
 static void run_no_args_command (char *args, int from_tty);
 
 static void go_command (char *line_no, int from_tty);
@@ -2861,4 +2864,173 @@ Register name as argument means describe only that register."));
 
   add_info ("vector", vector_info,
 	    _("Print the status of the vector unit\n"));
+
+  add_com ("heap", class_vars, heap_command, "heap dump");
+  add_com ("heapf", class_vars, heapf_command, "forced heap dump");
+
+}
+
+
+static
+CORE_ADDR heap_get_addr (char* exp)
+{
+  struct expression *expr;
+  struct cleanup *old_chain;
+  struct value *val;
+  CORE_ADDR addr;
+
+  expr = parse_expression (exp);
+  old_chain = make_cleanup (free_current_contents, &expr);
+  val = evaluate_expression (expr);
+  if (TYPE_CODE (value_type (val)) == TYPE_CODE_REF)
+    val = value_ind (val);
+  addr = value_as_address (val);
+  do_cleanups (old_chain);
+  return addr;
+}
+
+
+static
+int heap_looks_free (CORE_ADDR addr)
+{
+  unsigned int head, foot, nexthead;
+  if (target_read_memory (addr+4, (char*)&head, sizeof (head)))
+    return 0;
+  if (head > 128*1024*1024 || head < 8)
+    return 0;
+  head &= ~1;
+  if (head & 2)
+    return 0;
+  if (target_read_memory (addr+head, (char*)&foot, sizeof (foot)))
+    return 0;
+  if (head != foot)
+    return 0;
+  if (target_read_memory (addr+head+4, (char*)&nexthead, sizeof (nexthead)))
+    return 0;
+  if (nexthead&1)
+    return 0;
+
+  return 1;
+}
+
+
+void
+x_command (char *exp, int from_tty);
+
+static
+CORE_ADDR heap_scan_2 (CORE_ADDR addr, int* ok)
+{
+  struct gdbarch *gdbarch = get_current_arch ();
+  unsigned int head, nexthead;
+  unsigned int vptr;
+  const char* type;
+  *ok = 1;
+  if (target_read_memory (addr+4, (char*)&head, sizeof (head)))
+    goto we_are_lost;
+  if (head > 128*1024*1024 || head < 8)
+    goto we_are_lost;
+  head &= ~1;
+  if (head & 2)
+    goto we_are_lost;
+  if (target_read_memory (addr+head+4, (char*)&nexthead, sizeof (nexthead)))
+    goto we_are_lost;
+  if (nexthead&1) {
+    type = " USED ";
+  }
+  else {
+    if (!heap_looks_free (addr))
+      goto we_are_lost;
+    type = " FREE ";
+  }
+  print_address (gdbarch, addr+8, gdb_stdout);
+  printf_filtered (":");
+  printf_filtered ("%s", type);
+  print_address (gdbarch, head, gdb_stdout);
+  if (target_read_memory (addr+8, (char*)&vptr, sizeof (vptr)) == 0) {
+    unsigned int buf2;
+    char buf[256];
+    if (target_read_memory (vptr, (char*)&buf2, sizeof (buf2)) == 0) {
+      printf_filtered (" -> ");
+      sprintf (buf, "/x %lu", (unsigned long)vptr);
+      x_command (buf, 0);
+    }
+    else
+      printf_filtered ("\n");
+  }
+  else
+    printf_filtered ("\n");
+  return addr + head;
+
+ we_are_lost:
+  *ok = 0;
+  return addr + 8;
+}
+
+
+static
+CORE_ADDR heap_scan_1 (CORE_ADDR addr1, CORE_ADDR addr2, int forced)
+{
+  addr1 = ((addr1 + 7) & ~7); /* Align. */
+
+  /* Initial scan for a free block. */
+  if (!forced)
+    while (addr1 < addr2 && !heap_looks_free (addr1))
+      addr1 += 8;
+
+  while (addr1 < addr2) {
+    int ok;
+    addr1 = heap_scan_2 (addr1, &ok);
+    if (!ok)
+      return addr1;
+  }
+
+  return addr1;
+}
+
+
+static void heap_scan (CORE_ADDR addr1, CORE_ADDR addr2, int forced)
+{
+  addr1 -= 8;
+  while (addr1 < addr2) {
+    addr1 = heap_scan_1 (addr1, addr2, forced);
+    forced = 0;
+  }
+}
+
+
+static void
+heap_command_1 (char *args, int forced)
+{
+  char* exp2;
+  CORE_ADDR addr1, addr2;
+
+  if (!args)
+    error_no_arg ("starting address");
+  exp2 = strchr (args, ' ');
+  if (exp2)
+    *exp2 = 0;
+
+  addr1 = heap_get_addr (args);
+  addr2 = 0;
+  if (exp2)
+    addr2 = heap_get_addr (exp2+1);
+  if (addr2 == 0)
+    addr2 = addr1 + 1024;
+
+  heap_scan (addr1, addr2, forced);
+}
+
+
+static void
+heap_command (char *args, int from_tty)
+{
+  heap_command_1 (args, 0);
+}
+
+
+
+static void
+heapf_command (char *args, int from_tty)
+{
+  heap_command_1 (args, 1);
 }
diff --git a/gdb/printcmd.c b/gdb/printcmd.c
index 346c2e2..814affc 100644
--- a/gdb/printcmd.c
+++ b/gdb/printcmd.c
@@ -1360,7 +1360,7 @@ address_info (char *exp, int from_tty)
 }
 
 
-static void
+/*static*/ void
 x_command (char *exp, int from_tty)
 {
   struct expression *expr;
