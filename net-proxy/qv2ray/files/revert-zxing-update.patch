diff --git a/cmake/zxing-cpp.cmake b/cmake/zxing-cpp.cmake
index 6734b1ba..5a85340f 100644
--- a/cmake/zxing-cpp.cmake
+++ b/cmake/zxing-cpp.cmake
@@ -147,7 +147,6 @@ if(QV2RAY_ZXING_PROVIDER STREQUAL "module")
 elseif(QV2RAY_ZXING_PROVIDER STREQUAL "package")
     find_package(PkgConfig REQUIRED)
     pkg_check_modules(ZXING REQUIRED zxing)
-    #set(ZXING_LIBRARY ${ZXING_LIBRARIES})
-    set(ZXING_LIBRARY ZXing)
+    set(ZXING_LIBRARY ${ZXING_LIBRARIES})
     set(ZXING_INCLUDE_PATH ${ZXING_INCLUDE_DIRS})
 endif()
diff --git a/src/ui/common/QRCodeHelper.cpp b/src/ui/common/QRCodeHelper.cpp
index c658755b..55d4ad3a 100644
--- a/src/ui/common/QRCodeHelper.cpp
+++ b/src/ui/common/QRCodeHelper.cpp
@@ -5,40 +5,28 @@
 #include "MultiFormatWriter.h"
 #include "ReadBarcode.h"
 #include "base/Qv2rayBase.hpp"
-
 namespace Qv2ray::ui
 {
     using namespace ZXing;
-
-    QString DecodeQRCode(const QImage &img)
+    QString DecodeQRCode(const QImage &source)
     {
-        DecodeHints hints;
-        hints.setTryHarder(true);
-        hints.setTryRotate(true);
-        //
-        auto ImgFmtFromQImg = [](const QImage &img) {
-            switch (img.format())
+        if (source.isNull())
+            return "";
+        QImage img = source.copy();
+        const auto result =
+            ReadBarcode(img.width(), img.height(), img.bits(), img.width() * 4, 4, 0, 1, 2, { ZXing::BarcodeFormat::QR_CODE }, true, true);
+
+        if (result.isValid())
+        {
+            auto errLevel = result.metadata().getString(ResultMetadata::Key::ERROR_CORRECTION_LEVEL);
+            if (!errLevel.empty())
             {
-                case QImage::Format_ARGB32:
-                case QImage::Format_RGB32:
-#if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
-                    return ImageFormat::BGRX;
-#else
-                    return ImageFormat::XRGB;
-#endif
-                case QImage::Format_RGB888: return ImageFormat::RGB;
-                case QImage::Format_RGBX8888:
-                case QImage::Format_RGBA8888: return ImageFormat::RGBX;
-                case QImage::Format_Grayscale8: return ImageFormat::Lum;
-                default: return ImageFormat::None;
+                LOG(MODULE_UI, "EC Level: " + QString::fromStdWString(errLevel))
             }
-        };
-
-        auto exec = [&](const QImage &img) {
-            return QString::fromStdWString(ZXing::ReadBarcode({ img.bits(), img.width(), img.height(), ImgFmtFromQImg(img) }, hints).text());
-        };
+            return QString::fromStdWString(result.text());
+        }
 
-        return ImgFmtFromQImg(img) == ImageFormat::None ? exec(img.convertToFormat(QImage::Format_RGBX8888)) : exec(img);
+        return "";
     }
 
     QImage EncodeQRCode(const QString &content, const QSize &size)
