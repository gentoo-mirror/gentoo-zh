diff -r src/core/ngx_cycle.c src/core/ngx_cycle.c
87a88,93
> #if (NGX_ENABLE_SYSLOG)
>     cycle->new_log.facility = SYSLOG_FACILITY;
>     cycle->new_log.facility = ERR_SYSLOG_PRIORITY;
>     cycle->new_log.syslog_on = 0;
>     cycle->new_log.syslog_set = 0;
> #endif
diff -r src/core/ngx_log.c src/core/ngx_log.c
13a14,23
> #if (NGX_ENABLE_SYSLOG)
> static char *ngx_set_syslog(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
> void log_exit(ngx_cycle_t *cycle);
> 
> typedef struct{
>     ngx_str_t     name;
>     ngx_int_t     macro;
> } ngx_string_to_macro_t;
> #endif
> 
23a34,42
> #if (NGX_ENABLE_SYSLOG)
>     {ngx_string("syslog"),
>      NGX_MAIN_CONF|NGX_CONF_TAKE12,
>      ngx_set_syslog,
>      0,
>      0,
>      NULL},
> #endif
> 
46c65,69
<     NULL,                                  /* exit master */
---
> #if (NGX_ENABLE_SYSLOG)
>     log_exit,                              /* exit master */
> #else
>     NULL,
> #endif
54a78,120
> #if (NGX_ENABLE_SYSLOG)
> static ngx_string_to_macro_t ngx_syslog_facilities[] = {
>     {ngx_string("auth"),     LOG_AUTH},
> #if !(NGX_SOLARIS)
>     {ngx_string("authpriv"), LOG_AUTHPRIV},
> #endif
>     {ngx_string("cron"),     LOG_CRON},
>     {ngx_string("daemon"),   LOG_DAEMON},
> #if !(NGX_SOLARIS)
>     {ngx_string("ftp"),      LOG_FTP},
> #endif
>     {ngx_string("kern"),     LOG_KERN},
>     {ngx_string("local0"),   LOG_LOCAL0},
>     {ngx_string("local1"),   LOG_LOCAL1},
>     {ngx_string("local2"),   LOG_LOCAL2},
>     {ngx_string("local3"),   LOG_LOCAL3},
>     {ngx_string("local4"),   LOG_LOCAL4},
>     {ngx_string("local5"),   LOG_LOCAL5},
>     {ngx_string("local6"),   LOG_LOCAL6},
>     {ngx_string("local7"),   LOG_LOCAL7},
>     {ngx_string("lpr"),      LOG_LPR},
>     {ngx_string("mail"),     LOG_MAIL},
>     {ngx_string("news"),     LOG_NEWS},
>     {ngx_string("syslog"),   LOG_SYSLOG},
>     {ngx_string("user"),     LOG_USER},
>     {ngx_string("uucp"),     LOG_UUCP},
>     { ngx_null_string, 0}
> };
> 
> static ngx_string_to_macro_t ngx_syslog_priorities[] = {
>     {ngx_string("emerg"), LOG_EMERG},
>     {ngx_string("alert"), LOG_ALERT},
>     {ngx_string("crit"),  LOG_CRIT},
>     {ngx_string("error"), LOG_ERR},
>     {ngx_string("err"),   LOG_ERR},
>     {ngx_string("warn"),  LOG_WARNING},
>     {ngx_string("notice"),LOG_NOTICE},
>     {ngx_string("info"),  LOG_INFO},
>     {ngx_string("debug"), LOG_DEBUG},
>     { ngx_null_string, 0}
> };
> #endif
> 
91a158,160
> #if (NGX_ENABLE_SYSLOG)
>     u_char *errstr_syslog;
> #endif
93a163
> #if !(NGX_ENABLE_SYSLOG)
96a167
> #endif
104a176,179
> #if (NGX_ENABLE_SYSLOG)
>     errstr_syslog = p;
> #endif
> 
142a218,228
> #if (NGX_ENABLE_SYSLOG)
>     if (log->file != NULL && log->file->name.len != 0) {
>         (void) ngx_write_fd(log->file->fd, errstr, p - errstr);
>     }
> 
>     /* Don't send the debug level info to syslog */
>     if (log->syslog_on && level < NGX_LOG_DEBUG) {
>         /* write to syslog */
>         syslog(log->priority, "%.*s", (int)(p - errstr_syslog), errstr_syslog);
>     }
> #else
143a230
> #endif
146a234,236
> #if (NGX_ENABLE_SYSLOG)
>         || (log->file != NULL && log->file->fd == ngx_stderr))
> #else
147a238
> #endif
367a459,502
>  
> 
> #if (NGX_ENABLE_SYSLOG)
> ngx_int_t
> ngx_log_get_priority(ngx_conf_t *cf, ngx_str_t *priority)
> {
>     ngx_int_t  p = 0;
>     ngx_uint_t n, match = 0;
> 
>     for (n = 0; ngx_syslog_priorities[n].name.len != 0; n++) {
>         if (ngx_strncmp(priority->data, ngx_syslog_priorities[n].name.data, 
>                     ngx_syslog_priorities[n].name.len) == 0) {
>             p = ngx_syslog_priorities[n].macro;
>             match = 1;
>         }
>     }
> 
>     if (!match) {
>         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
>                 "invalid syslog priority \"%V\"", priority);
>         return -1;
>     }
> 
>     return p;
> }
> 
> 
> char *
> ngx_log_set_priority(ngx_conf_t *cf, ngx_str_t *priority, ngx_log_t *log)
> {
>     log->priority = ERR_SYSLOG_PRIORITY;
> 
>     if (priority->len == 0) {
>         return NGX_CONF_OK;
>     }
> 
>     log->priority = ngx_log_get_priority(cf, priority);
>     if (log->priority == (-1)) {
>         return NGX_CONF_ERROR;
>     }
> 
>     return NGX_CONF_OK;
> }
> #endif
431a567,573
> #if (NGX_ENABLE_SYSLOG)
>     u_char     *off = NULL;
>     ngx_str_t  priority;
> 
>     ngx_str_null(&name);
>     ngx_str_null(&priority);
> #endif
437a580,588
> #if (NGX_ENABLE_SYSLOG)
>     if (ngx_strncmp(value[1].data, "syslog", sizeof("syslog") - 1) == 0) {
>         if (!cf->cycle->new_log.syslog_set) {
>             ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
>                     "You must set the syslog directive and enable it first.");
>             return NGX_CONF_ERROR;
>         }
> 
>         cf->cycle->new_log.syslog_on = 1;
438a590,615
>         if (value[1].data[sizeof("syslog") - 1] == ':') {
>             priority.len = value[1].len - sizeof("syslog");
>             priority.data = value[1].data + sizeof("syslog");
> 
>             off = (u_char *)ngx_strchr(priority.data, (int) '|');
>             if (off != NULL) {
>                 priority.len = off - priority.data;
> 
>                 off++;
>                 name.len = value[1].data + value[1].len - off;
>                 name.data = off;
>             }
>         }
>         else {
>             if (value[1].len > sizeof("syslog")) {
>                 name.len = value[1].len - sizeof("syslog");
>                 name.data = value[1].data + sizeof("syslog");
>             }
>         }
> 
>         if (ngx_log_set_priority(cf, &priority, &cf->cycle->new_log) == NGX_CONF_ERROR) {
>             return NGX_CONF_ERROR;
>         }
>     }
>     else if (ngx_strcmp(value[1].data, "stderr") == 0) {
> #else
439a617
> #endif
441d618
< 
459a637,696
> 
> 
> #if (NGX_ENABLE_SYSLOG)
> 
> #define SYSLOG_IDENT_NAME "nginx"
> 
> static char *
> ngx_set_syslog(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
> {
>     char       *program;
>     ngx_str_t  *value;
>     ngx_int_t   facility, match = 0;
>     ngx_uint_t  n;
> 
>     value = cf->args->elts;
> 
>     if (cf->cycle->new_log.syslog_set) {
>         return "is duplicate";
>     }
> 
>     cf->cycle->new_log.syslog_set = 1;
> 
>     for (n = 0; ngx_syslog_facilities[n].name.len != 0; n++) {
>         if (ngx_strncmp(value[1].data, ngx_syslog_facilities[n].name.data, 
>                     ngx_syslog_facilities[n].name.len) == 0) {
>             facility = ngx_syslog_facilities[n].macro;
>             match = 1;
>             break;
>         }
>     }
> 
>     if (match) {
>         cf->cycle->new_log.facility = facility;
>         cf->cycle->new_log.priority = ERR_SYSLOG_PRIORITY;
>     }
>     else {
>         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
>                 "invalid syslog facility \"%V\"", &value[1]);
>         return NGX_CONF_ERROR;
>     }
> 
>     program = SYSLOG_IDENT_NAME; 
>     if (cf->args->nelts > 2) {
>         program = (char *) value[2].data;
>     }
> 
>     openlog(program, LOG_ODELAY, facility);
> 
>     return NGX_CONF_OK;
> }
> 
> 
> void log_exit(ngx_cycle_t *cycle)
> {
>     if (cycle->new_log.syslog_set) {
>         closelog();
>     }
> }
> #endif
> 
diff -r src/core/ngx_log.h src/core/ngx_log.h
14a15,20
> #if (NGX_ENABLE_SYSLOG)
> #include <syslog.h>
> 
> #define SYSLOG_FACILITY LOG_LOCAL5
> #define ERR_SYSLOG_PRIORITY LOG_ERR
> #endif
63a70,76
> 
> #if (NGX_ENABLE_SYSLOG)
>     ngx_int_t           priority;
>     ngx_int_t           facility;
>     unsigned            syslog_on:1;      /* unsigned :1 syslog_on */
>     unsigned            syslog_set:1;      /*unsigned :1 syslog_set */
> #endif
223a237,240
> #if (NGX_ENABLE_SYSLOG)
> ngx_int_t ngx_log_get_priority(ngx_conf_t *cf, ngx_str_t *priority);
> char * ngx_log_set_priority(ngx_conf_t *cf, ngx_str_t *priority, ngx_log_t *log);
> #endif
diff -r src/http/modules/ngx_http_log_module.c src/http/modules/ngx_http_log_module.c
11a12,17
> #if (NGX_ENABLE_SYSLOG)
> #include <syslog.h>
> 
> #define HTTP_SYSLOG_PRIORITY LOG_NOTICE
> #endif
> 
54a61,65
> 
> #if (NGX_ENABLE_SYSLOG)
>     ngx_int_t                   priority;
>     unsigned                    syslog_on:1;      /* unsigned :1 syslog_on */
> #endif
325a337,344
>     
> #if (NGX_ENABLE_SYSLOG)
>     n = 0;
>     if (log->syslog_on) {
>         syslog(log->priority, "%.*s", (int)len, buf);
>     }
> #endif
>      
328a348,355
> #if (NGX_ENABLE_SYSLOG)
>         if (name != NULL) {
>             n = ngx_write_fd(log->file->fd, buf, len);
>         }
>         else {
>             n = len;
>         }
> #else
329a357
> #endif
858a887,890
> #if (NGX_ENABLE_SYSLOG)
>     log->priority = HTTP_SYSLOG_PRIORITY;
>     log->syslog_on = 0;
> #endif
882a915,920
> #if (NGX_ENABLE_SYSLOG)
>     u_char                     *off;
>     ngx_str_t                   priority;
>     ngx_uint_t                  syslog_on = 0;
>     name = priority = (ngx_str_t)ngx_null_string;
> #endif
895a934,965
> #if (NGX_ENABLE_SYSLOG)
>     else if (ngx_strncmp(value[1].data, "syslog", sizeof("syslog") - 1) == 0) {
>         if (!cf->cycle->new_log.syslog_set) {
>             ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
>                                "You must set the syslog directive and enable it first.");
>             return NGX_CONF_ERROR;
>         }
> 
>         syslog_on = 1;
>         if (value[1].data[sizeof("syslog") - 1] == ':') {
>             priority.len = value[1].len - sizeof("syslog");
>             priority.data = value[1].data + sizeof("syslog");
> 
>             off = (u_char*) ngx_strchr(priority.data, '|'); 
>             if (off != NULL) {
>                 priority.len = off - priority.data;
>                 
>                 off++;
>                 name.len = value[1].data + value[1].len - off;
>                 name.data = off;
>             }
>         }
>         else {
>             if (value[1].len > sizeof("syslog")) {
>                 name.len = value[1].len - sizeof("syslog");
>                 name.data = value[1].data + sizeof("syslog");
>             }
>         }
>     } else {
>         name = value[1];
>     }
> #endif
911a982,1027
> #if (NGX_ENABLE_SYSLOG)
>     log->syslog_on = syslog_on;
> 
>     if (priority.len == 0) {
>         log->priority = HTTP_SYSLOG_PRIORITY;
>     }
>     else {
>         log->priority = ngx_log_get_priority(cf, &priority);
>     }
> 
>     if (name.len != 0) {
>         n = ngx_http_script_variables_count(&name);
> 
>         if (n == 0) {
>             log->file = ngx_conf_open_file(cf->cycle, &name);
>             if (log->file == NULL) {
>                 return NGX_CONF_ERROR;
>             }
>         } else {
>             if (ngx_conf_full_name(cf->cycle, &name, 0) != NGX_OK) {
>                 return NGX_CONF_ERROR;
>             }
>             log->script = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_script_t));
>             if (log->script == NULL) {
>                 return NGX_CONF_ERROR;
>             }
>             ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
>             sc.cf = cf;
>             sc.source = &name;
>             sc.lengths = &log->script->lengths;
>             sc.values = &log->script->values;
>             sc.variables = n;
>             sc.complete_lengths = 1;
>             sc.complete_values = 1;
>             if (ngx_http_script_compile(&sc) != NGX_OK) {
>                 return NGX_CONF_ERROR;
>             }
>         }
>     }
>     else {
>         log->file = ngx_conf_open_file(cf->cycle, &name);
>         if (log->file == NULL) {
>             return NGX_CONF_ERROR;
>         }
>     }
> #else
944a1061
> #endif
diff -r src/http/ngx_http_core_module.c src/http/ngx_http_core_module.c
1452a1453,1455
> #if (NGX_ENABLE_SYSLOG)
>         r->connection->log->priority = clcf->error_log->priority;
> #endif
4764a4768,4776
> #if (NGX_ENABLE_SYSLOG)
>     u_char     *off = NULL;
>     ngx_int_t   syslog_on = 0;
>     ngx_str_t   priority;
> 
>     name = priority = (ngx_str_t) ngx_null_string;
> #endif
> 
> 
4772a4785,4814
> #if (NGX_ENABLE_SYSLOG)
>     } else if (ngx_strncmp(value[1].data, "syslog", sizeof("syslog") - 1) == 0) {
>         if (!cf->cycle->new_log.syslog_set) {
>             ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
>                     "You must set the syslog directive and enable it first.");
>             return NGX_CONF_ERROR;
>         }
> 
>         syslog_on = 1;
> 
>         if (value[1].data[sizeof("syslog") - 1] == ':') {
>             priority.len = value[1].len - sizeof("syslog");
>             priority.data = value[1].data + sizeof("syslog");
> 
>             off = (u_char*) ngx_strchr(priority.data, '|'); 
>             if (off != NULL) {
>                 priority.len = off - priority.data;
> 
>                 off++;
>                 name.len = value[1].data + value[1].len - off;
>                 name.data = off;
>             }
>         }
>         else {
>             if (value[1].len > sizeof("syslog")) {
>                 name.len = value[1].len - sizeof("syslog");
>                 name.data = value[1].data + sizeof("syslog");
>             }
>         }
> #endif
4781a4824,4834
> #if (NGX_ENABLE_SYSLOG)
>     if (syslog_on) {
>         clcf->error_log->syslog_on = 1;
>         if (ngx_log_set_priority(cf, &priority, clcf->error_log) == NGX_CONF_ERROR) {
>             return NGX_CONF_ERROR;
>         }
>     }
> 
>     clcf->error_log->log_level = 0;
> #endif
> 
diff -r src/http/ngx_http_request.c src/http/ngx_http_request.c
1834a1835,1837
> #if (NGX_ENABLE_SYSLOG)
>     r->connection->log->priority = clcf->error_log->priority;
> #endif
