diff -ru reciteword-0.8.4/configure reciteword-0.8.4.new/configure
--- reciteword-0.8.4/configure	2007-11-28 16:04:01.000000000 +0800
+++ reciteword-0.8.4.new/configure	2011-10-26 19:00:59.715910261 +0800
@@ -22820,12 +22820,12 @@
         pkg_cv_RECITEWORD_CFLAGS="$RECITEWORD_CFLAGS"
     else
         if test -n "$PKG_CONFIG" && \
-    { (echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound\"") >&5
-  ($PKG_CONFIG --exists --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound") 2>&5
+    { (echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"gtk+-2.0 >= 2.2.0 gthread-2.0 d\"") >&5
+  ($PKG_CONFIG --exists --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 ") 2>&5
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; then
-  pkg_cv_RECITEWORD_CFLAGS=`$PKG_CONFIG --cflags "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound" 2>/dev/null`
+  pkg_cv_RECITEWORD_CFLAGS=`$PKG_CONFIG --cflags "gtk+-2.0 >= 2.2.0 gthread-2.0 " 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -22838,12 +22838,12 @@
         pkg_cv_RECITEWORD_LIBS="$RECITEWORD_LIBS"
     else
         if test -n "$PKG_CONFIG" && \
-    { (echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound\"") >&5
-  ($PKG_CONFIG --exists --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound") 2>&5
+    { (echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"gtk+-2.0 >= 2.2.0 gthread-2.0 \"") >&5
+  ($PKG_CONFIG --exists --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 ") 2>&5
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; then
-  pkg_cv_RECITEWORD_LIBS=`$PKG_CONFIG --libs "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound" 2>/dev/null`
+  pkg_cv_RECITEWORD_LIBS=`$PKG_CONFIG --libs "gtk+-2.0 >= 2.2.0 gthread-2.0 " 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -22862,14 +22862,14 @@
         _pkg_short_errors_supported=no
 fi
         if test $_pkg_short_errors_supported = yes; then
-	        RECITEWORD_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound"`
+	        RECITEWORD_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 "`
         else
-	        RECITEWORD_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound"`
+	        RECITEWORD_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gtk+-2.0 >= 2.2.0 gthread-2.0"`
         fi
 	# Put the nasty error message in config.log where it belongs
 	echo "$RECITEWORD_PKG_ERRORS" >&5
 
-	{ { echo "$as_me:$LINENO: error: Package requirements (gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound) were not met:
+	{ { echo "$as_me:$LINENO: error: Package requirements (gtk+-2.0 >= 2.2.0 gthread-2.0) were not met:
 
 $RECITEWORD_PKG_ERRORS
 
@@ -22880,7 +22880,7 @@
 and RECITEWORD_LIBS to avoid the need to call pkg-config.
 See the pkg-config man page for more details.
 " >&5
-echo "$as_me: error: Package requirements (gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound) were not met:
+echo "$as_me: error: Package requirements (gtk+-2.0 >= 2.2.0 gthread-2.0) were not met:
 
 $RECITEWORD_PKG_ERRORS
 
diff -ru reciteword-0.8.4/configure.in reciteword-0.8.4.new/configure.in
--- reciteword-0.8.4/configure.in	2007-11-28 16:03:48.000000000 +0800
+++ reciteword-0.8.4.new/configure.in	2011-10-26 19:01:08.311802796 +0800
@@ -32,7 +32,7 @@
 dnl
 dnl Start of pkg-config checks
 dnl
-PKG_CHECK_MODULES(RECITEWORD, gtk+-2.0 >= 2.2.0 gthread-2.0 >= 2.2.0 esound)
+PKG_CHECK_MODULES(RECITEWORD, gtk+-2.0 >= 2.2.0 gthread-2.0)
 RECITEWORD_LIBS="${RECITEWORD_LIBS}"
 RECITEWORD_CFLAGS="\
 	-Wall \
diff -aur reciteword-0.8.4/src/sndserv.cpp reciteword-0.8.4.new/src/sndserv.cpp
--- reciteword-0.8.4/src/sndserv.cpp	2007-11-05 15:10:47.000000000 +0800
+++ reciteword-0.8.4.new/src/sndserv.cpp	2008-04-07 16:31:50.000000000 +0800
@@ -1,121 +1,119 @@
-#include "sndserv.h"
-#include "reciteword.h"
-#include <cstdio>
-#include <cstdlib>
-
-#ifdef G_OS_WIN32
-    #include "windows.h"
-#else
-	#include <esd.h>
-#endif
-
-extern CReciteWord* g_pReciteWord;
-
-CSndserv::CSndserv()
-{
-#ifdef G_OS_WIN32
-	canplay = true;
-#else
-	fd=esd_open_sound(NULL);//"localhost";
-	canplay = (fd>=0);
-#endif
-	if (!canplay)
-		g_print("esd initialization failed,no sound will be play!\n");
-}
-
-CSndserv::~CSndserv()
-{
-#ifdef G_OS_WIN32
-#else
-	if (fd>=0) esd_close(fd);
-#endif
-}
-
-void
-CSndserv::play(const gchar *filename)
-{
-#ifdef G_OS_WIN32
-#else
-	if (fd>=0)
-		esd_play_file(NULL,filename,0); // ???
-		//esd_play_file ("reciteword", filename, 1);
-#endif
-}
-
-//static CSndserv sndserv;
-
-#ifndef G_OS_WIN32
-static gpointer play_file_mix(gpointer data)
-{
-	g_pReciteWord->sndserv.play((gchar *)data);
-	g_free(data);
-	return NULL;
-}
-#endif
-
-/*
-static void play_file_after_pre(gpointer data,gpointer user_data)
-{
-	g_pReciteWord->sndserv.play((gchar *)user_data);
-	return NULL;
-}
-
-class CThreadPool
-{
-	GThreadPool *pool;
-public:
-	CThreadPool();
-	~CThreadPool();
-};
-
-CThreadPool::CThreadPool()
-{
-	pool = g_thread_pool_new(play_file_after_pre,NULL,1,FALSE,NULL);
-}
-
-CThreadPool::~CThreadPool()
-{
-	g_thread_pool_free(pool,);
-}
-*/
-
-
-void play_file(const char *filename,PLAY_METHOD method)
-{
-	if ((!g_pReciteWord->sndserv.canplay)||(g_pReciteWord->sndserv.disable))
-		return;
-
-	//esd_play_file ("reciteword", filename, 1);  //it can't return quickly :( when in typing,press wrong key will cause freezing.
-		
-	// the system() function is inefficiency, should change to use thread to call esd_play_file().
-	/*gchar command[256];
-	sprintf(command,"esdplay %s &",filename);
-	system(command);*/
-	
-	//I tried to use gnome_sound_play() without threading, but it is too slow when you type words fast.
-	
-	switch (method)
-	{
-		case PM_MIX:
-		{
-#ifdef G_OS_WIN32
-    	PlaySound(filename, 0, SND_ASYNC | SND_FILENAME);
-#else
-			GThread * thread;
-			gchar *dup_filename = g_strdup(filename); //as in the new thread, filename may have already be freeed.
-			thread = g_thread_create(play_file_mix,(gpointer)dup_filename,false,NULL);  //use GThreadPool may be more efficient.
-#endif
-			break;
-		}
-		case PM_STOP_PRE:   // it is hard to done,may need write my own esd_play_file.
-		{
-			break;
-		}
-		case PM_AFTER_PRE:  // use GThreadPool can do this,but,it does seems very useful before PM_STOP_PRE is done.
-		{
-			//GThreadPool *threadpool;
-			
-			break;
-		}
-	}
-}
+#include "sndserv.h"
+#include "reciteword.h"
+#include <cstdio>
+#include <cstdlib>
+
+#ifdef G_OS_WIN32
+    #include "windows.h"
+
+#endif
+
+extern CReciteWord* g_pReciteWord;
+
+CSndserv::CSndserv()
+{
+#ifdef G_OS_WIN32
+	canplay = true;
+#else
+	//fd=esd_open_sound(NULL);//"localhost";
+	//canplay = (fd>=0);
+	canplay = true;
+#endif
+	if (!canplay)
+		g_print("esd initialization failed,no sound will be play!\n");
+}
+
+CSndserv::~CSndserv()
+{
+#ifdef G_OS_WIN32
+#else
+//	if (fd>=0) esd_close(fd);
+#endif
+}
+
+void
+CSndserv::play(const gchar *filename)
+{
+#ifdef G_OS_WIN32
+#else
+//	if (fd>=0)
+//		esd_play_file(NULL,filename,0); // ???
+//		//esd_play_file ("reciteword", filename, 1);
+#endif
+}
+
+//static CSndserv sndserv;
+
+static gpointer play_file_mix(gpointer data)
+{
+	g_pReciteWord->sndserv.play((gchar *)data);
+	g_free(data);
+	return NULL;
+}
+
+/*
+static void play_file_after_pre(gpointer data,gpointer user_data)
+{
+	g_pReciteWord->sndserv.play((gchar *)user_data);
+	return NULL;
+}
+
+class CThreadPool
+{
+	GThreadPool *pool;
+public:
+	CThreadPool();
+	~CThreadPool();
+};
+
+CThreadPool::CThreadPool()
+{
+	pool = g_thread_pool_new(play_file_after_pre,NULL,1,FALSE,NULL);
+}
+
+CThreadPool::~CThreadPool()
+{
+	g_thread_pool_free(pool,);
+}
+*/
+
+
+void play_file(const char *filename,PLAY_METHOD method)
+{
+	if ((!g_pReciteWord->sndserv.canplay)||(g_pReciteWord->sndserv.disable))
+		return;
+
+	//esd_play_file ("reciteword", filename, 1);  //it can't return quickly :( when in typing,press wrong key will cause freezing.
+		
+	// the system() function is inefficiency, should change to use thread to call esd_play_file().
+	/*gchar command[256];
+	sprintf(command,"esdplay %s &",filename);
+	system(command);*/
+	
+	switch (method)
+	{
+		case PM_MIX:
+		{
+#ifdef G_OS_WIN32
+    	PlaySound(filename, 0, SND_ASYNC | SND_FILENAME);
+#else
+//			GThread * thread;
+//			gchar *dup_filename = g_strdup(filename); //as in the new thread, filename may have already be freeed.
+//			thread = g_thread_create(play_file_mix,(gpointer)dup_filename,false,NULL);  //use GThreadPool may be more efficient.	                
+			gchar *command=g_strdup_printf("aplay -B 1 %s &",filename);
+            		system(command);
+#endif
+			break;
+		}
+		case PM_STOP_PRE:   // it is hard to done,may need write my own esd_play_file.
+		{
+			break;
+		}
+		case PM_AFTER_PRE:  // use GThreadPool can do this,but,it does seems very useful before PM_STOP_PRE is done.
+		{
+			//GThreadPool *threadpool;
+			
+			break;
+		}
+	}
+}
\ No newline at end of file
